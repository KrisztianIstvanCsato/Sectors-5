@page "/"
@using System.ComponentModel.DataAnnotations
@using Sectors.Shared.Dtos;

@inject IApiService ApiService
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Sectors</PageTitle>

<h1>Sectors</h1>

<label name="call_for_action">Please enter your name and pick the Sectors you are currently involved in.</label>
<br />
<EditForm Model="CurrentUser" OnInvalidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
<table>
    <tbody>
        <tr>
        <td>
            <div>
                <label>Name</label>
                <InputText name="name" @bind-Value="CurrentUser.Name"></InputText>
                <ValidationMessage For=@(() => CurrentUser.Name) />
                <br>
            </div>
        </td>
        <td>
            <button type="button" class="btn btn-danger" @onclick="@(e => SearchUser(CurrentUser.Name))">Search user</button>
        </td>
        <td>
            <button type="button" class="btn btn-warning" @onclick="ClearForm">Clear form</button>
        </td>
        </tr>
     </tbody>
  </table>

  <br />

    @if (SectorList == null)
    {
        @if (Loading)
        {
           <p><em>Loading...</em></p>
        }
    }
    else
    {
        @if (CurrentUser.UserId.Equals(0))
        {
            <CreateUserTitle></CreateUserTitle>
        }
        else
        {
            <EditUserTitle></EditUserTitle>
        }
        <br />
        <SelectList Items="SectorList" @bind-SelectedItems="SelectedSectors" Context="sector">
            <ItemTemplate>
                @sector.Name
            </ItemTemplate>
        </SelectList>
    <hr />
    <br />
    <InputCheckbox name="agreement" @bind-Value=CurrentUser.Agreed></InputCheckbox>
    <ValidationMessage For=@(() => CurrentUser.Agreed) />
    <label for="agreement">Agree to terms</label>
    <br />
    <button @onclick="HandleSubmit" name="submit" type="submit">Submit</button>
    <br />
    }
</EditForm>

@code {
    public List<SectorDto> SelectedSectors { get; set; }
    private List<SectorDto> SectorList;
    public EventCallback<List<SectorDto>> SelectedSectorsChanged { get; set; }

    private string UserNameInput = string.Empty;
    private List<SectorDto> HiddenSectors;
    public UserDto CurrentUser { get; set; } = new();
    bool Loading = false;

    protected override async void OnInitialized()
    {
        HiddenSectors = await ApiService.GetSectors();
    }

    private void ClearForm()
    {
        SectorList = null;
        SelectedSectors = new();
        CurrentUser = new();
    }

    async Task SearchUser(string nameInput)
    {
        ClearForm();

        if (nameInput != null && nameInput.Trim().Length > 0)
        {
            Loading = true;

            CurrentUser = await ApiService.GetUserByName(nameInput);
            
            if (!CurrentUser.Sectors.Count.Equals(0))
            {
                UserNameInput = nameInput;
                
                foreach (var sector in CurrentUser.Sectors)
                {
                    SelectedSectors.Add(HiddenSectors.Where(i => i.SectorId == sector.SectorId).FirstOrDefault());
                }
            }
            else
            {
                CurrentUser.Name = nameInput;
            }

            Loading = false;
            SectorList = HiddenSectors;
        }
    }

    async void HandleSubmit()
    {
        if (CurrentUser.Sectors.Count.Equals(0))
        {
            CurrentUser = await ApiService.CreateUser(CurrentUser, SelectedSectors);
        }
        else
        {
            await ApiService.UpdateUser(UserNameInput, CurrentUser, SelectedSectors);
        }
    }
}
