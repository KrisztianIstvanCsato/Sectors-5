@page "/"
@using System.ComponentModel.DataAnnotations

@inject IApiService SectorService
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Sectors</PageTitle>

<h1>Sectors</h1>

<label name="call_for_action">Please enter your name and pick the Sectors you are currently involved in.</label>

<EditForm Model="CurrentUser" OnInvalidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
<table>
    <tbody>
        <tr>
        <td>
            <div>
                <label>Name</label>
                <InputText name="name" @bind-Value="CurrentUser.Name"></InputText>
                <ValidationMessage For=@(() => CurrentUser.Name) />
                <br>
            </div>
        </td>
        <td>
            <button type="button" class="btn btn-danger" @onclick="@(e => SearchUser(CurrentUser.Name))">Search user</button>
        </td>
        </tr>
     </tbody>
  </table>

  <br>

    @if (SectorList == null)
    {
        @if (Loading == false)
       {
           
       }
        else
        {
            <p><em>Loading...</em></p>
        }
    }
    else
    {
        
        @if (CurrentUser.Id.Equals(0))
        {
            <CreateUserTitle></CreateUserTitle>
        }
        else
        {
            <EditUserTitle></EditUserTitle>
        }
        <br>
        <SelectList Items="SectorList" @bind-SelectedItems="SelectedSectors" Context="sector">
            <ItemTemplate>
                @sector.Name
            </ItemTemplate>
        </SelectList>

    <hr />

    <ul>
        @foreach (var item in SelectedSectors)
        {
            <li>@item.Id : @item.Name</li>
        }
    </ul>
    <br>
    <p>CurrentUser empty: @CurrentUser.Id.Equals(0)</p>
    <br>
    <br>
    <InputCheckbox name="agreement" @bind-Value=CurrentUser.Agreed></InputCheckbox>
    <ValidationMessage For=@(() => CurrentUser.Agreed) />
    <label for="agreement">Agree to terms</label>
    <br>
    <br>
    <button @onclick="HandleSubmit" name="submit" type="submit">Submit</button>
    }
</EditForm>

@code {
    public List<SectorModel> SelectedSectors { get; set; } = new();
    private List<SectorModel> SectorList;
    public UserModel CurrentUser { get; set; } = new();
    public EventCallback<List<SectorModel>> SelectedSectorsChanged { get; set; }
    bool Loading = false;

    async Task SearchUser(string nameInput)
    {
        if (nameInput.Length > 0)
        {
            Loading = true;
            SectorList = null;
            SelectedSectors = new();
            List<SectorModel> sectors = await SectorService.GetSectors();

            CurrentUser = new();
            CurrentUser = await SectorService.GetUserByName(nameInput);
            if(CurrentUser != null)
            {
                CurrentUser.Name = nameInput;
                List<User_Sector_Model> UserSectors = new();
                UserSectors = await SectorService.GetSectorIdListByUserId(CurrentUser.Id);
                if (!UserSectors.Count.Equals(0))
                {
                    var SelectedSectorIdList = UserSectors.Select(s => s.Id).ToArray();
                    foreach (var sectorId in SelectedSectorIdList)
                    {
                        SelectedSectors.Add(sectors.Where(i => i.Id == sectorId).FirstOrDefault());
                    }
                }
                Loading = false;
                await JSRuntime.InvokeVoidAsync("console.log", CurrentUser);
            }
            SectorList = sectors;
        }
    }

    async void HandleSubmit()
    {
        if (CurrentUser.Id.Equals(0))
        {
            await SectorService.CreateUser(CurrentUser);
        }
        else
        {
            await SectorService.UpdateUser(CurrentUser);
        }
    }
}
