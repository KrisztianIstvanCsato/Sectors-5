@page "/"
@using System.ComponentModel.DataAnnotations
@using Sectors.Shared.Dtos;

@inject IApiService ApiService
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Sectors</PageTitle>

<h1>Sectors</h1>
<br>
<label name="call_for_action">Please enter your name and pick the Sectors you are currently involved in.</label>
<br>
<br>
<EditForm Model="CurrentUser" OnInvalidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <table>
        <tbody>
            <tr>
                <td>
                    <div>
                        <label>Name</label>
                        <InputText name="name" @bind-Value="CurrentUser.Name"></InputText>
                        <ValidationMessage For=@(() => CurrentUser.Name) />
                        <br>
                    </div>
                </td>
                <td>
                    <button type="button" class="btn btn-danger" @onclick="@(e => SearchUser(CurrentUser.Name))">Search</button>
                    <button type="button" class="btn btn-warning" @onclick="ClearForm">Clear</button>
                </td>
            </tr>
        </tbody>
    </table>

    <br>

    @if (SectorList == null)
    {
        @if (Loading)
        {
            <p><em>Loading...</em></p>
        }
    }
    else
    {
        @if (CurrentUser.UserId.Equals(0) && ShowTitle)
        {
            <CreateUserTitle></CreateUserTitle>
        }
        else
        {
            <EditUserTitle></EditUserTitle>
        }
        <br>
        @foreach (var Sector in SectorList)
        {
            <SelectList Item="Sector" ItemId="Sector.SectorId"
                @bind-SelectedItems="SelectedSectors" Context="sector">
                <ItemTemplate>
                    @sector.Name
                </ItemTemplate>
            </SelectList>
        }
        <hr />
        <br>
        <InputCheckbox name="agreement" @bind-Value=CurrentUser.Agreed></InputCheckbox>
        <ValidationMessage For=@(() => CurrentUser.Agreed) />
        <label for="agreement">Agree to terms</label>
        <br>
        <br>
        <button @onclick="HandleSubmit" name="submit" type="submit">Submit</button>
        <br>
        <br>
    }
</EditForm>

@code {
    public List<SectorDto> SelectedSectors { get; set; }
    private List<SectorDto> SectorList;
    public EventCallback<List<SectorDto>> SelectedSectorsChanged { get; set; }

    private string UserNameInput = string.Empty;
    private List<SectorDto> HiddenSectors;
    public UserDto CurrentUser { get; set; } = new();
    bool Loading = false;
    bool ShowTitle = true;

    protected override async void OnInitialized()
    {
        HiddenSectors = await ApiService.GetSectors();
    }

    private void ClearForm()
    {
        SectorList = null;
        SelectedSectors = new();
        CurrentUser = new();
    }

    async Task SearchUser(string nameInput)
    {
        ClearForm();

        if (nameInput != null && nameInput.Trim().Length > 0)
        {
            Loading = true;

            CurrentUser = await ApiService.GetUserByName(nameInput);
            CurrentUser.Name = nameInput;
            UserNameInput = nameInput;

            if (!CurrentUser.UserId.Equals(0))
            {
                var SelectedSectorIds = CurrentUser.Sectors.Select(cs => cs.SectorId).ToList();
                SelectedSectors = HiddenSectors.Where(hs => SelectedSectorIds.Contains(hs.SectorId)).ToList();
            }

            Loading = false;
            SectorList = HiddenSectors;
        }
    }

    async void HandleSubmit()
    {
        if (CurrentUser.Name != null && CurrentUser.Name.Trim().Length > 0)
        {
            var IsNameAllowed = true;
            if (!UserNameInput.Equals(CurrentUser.Name))
            {
                IsNameAllowed = await ApiService.FindNameInUse(CurrentUser.Name);
            }

            if (IsNameAllowed)
            {
                ShowTitle = false;
                CurrentUser = await ApiService.UserOperation(UserNameInput, CurrentUser, SelectedSectors);
                ShowTitle = true;
            }
        }
    }
}
