@page "/"
@using System.ComponentModel.DataAnnotations
@using Sectors.Shared.Dtos;
@using Sectors.Client.Shared;

@inject IApiService ApiService
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Sectors</PageTitle>

<h1>Sectors</h1>
<br>
<label name="call_for_action">Please enter your name and pick the Sectors you are currently involved in.</label>
<br>
<br>
<EditForm Model="CurrentUser" OnInvalidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <table>
        <tbody>
            <tr>
                <td>
                    <div>
                        <label for="Name">Name</label>
                        <InputText id="Name" @bind-Value="CurrentUser.Name"></InputText>
                        <br>
                    </div>
                </td>
                <td>
                    <button type="button" class="btn btn-danger" @onclick="@(e => SearchUser(CurrentUser.Name))">Search</button>
                    <button type="button" class="btn btn-warning" @onclick="ClearForm">Clear</button>
                </td>
            </tr>
            <ValidationMessage For=@(() => CurrentUser.Name) />
        </tbody>
    </table>

    <br>

    @if (VisibleSector.Count.Equals(0))
    {
        @if (Loading)
        {
            <p><em>Loading...</em></p>
        }
    }
    else
    {
        @if (CurrentUser.UserId.Equals(0))
        {
            <CreateUserTitle></CreateUserTitle>
        }
        else
        {
            <EditUserTitle></EditUserTitle>
        }

        <br>

        <div class=modal-dialog-scrollable>
            @foreach (var Sector in HiddenSectors)
            {
                <SelectList Item="Sector" ItemId="Sector.SectorId"
                    @bind-SelectedItems="SelectedSectors" Context="sector">
                    <ItemTemplate>
                        @for (var i = 0; i < (Sector.Level * 4); i++)
                        {
                    @:&nbsp;
                        }
                @Sector.Name
            </ItemTemplate>
        </SelectList>
            }
        </div>
        <ValidationMessage For=@(() => CurrentUser.SectorIds) />
        <hr />
        <br>

        <AgreementComponent User="CurrentUser">
        </AgreementComponent>

        <br>
        <ValidationSummary />
        <br>
        <button @onclick="HandleSubmit" name="submit" type="submit">Submit</button>
        <br>
        <br>
    }
</EditForm>

@code {
    public List<SectorDto> SelectedSectors { get; set; } = new();
    private List<SectorDto> VisibleSector { get; set; } = new();
    public UserDto CurrentUser { get; set; } = new();
    public EventCallback<List<SectorDto>> SelectedSectorsChanged { get; set; }

    private string InitialNameInput = string.Empty;
    private List<SectorDto> HiddenSectors { get; set; } = new();
    bool Loading = false;

    protected override async void OnInitialized()
    {
        HiddenSectors = await ApiService.GetSectors();
    }

    private void ClearForm()
    {
        VisibleSector = new();
        SelectedSectors = new();
        CurrentUser = new();
    }

    async Task SearchUser(string nameInput)
    {
        ClearForm();

        if (!string.IsNullOrWhiteSpace(nameInput))
        {
            Loading = true;

            CurrentUser = await ApiService.GetUserByName(nameInput);
            InitialNameInput = CurrentUser.Name;

            SelectedSectors = SelectingSectors(CurrentUser.SectorIds, HiddenSectors);

            Loading = false;
            VisibleSector = HiddenSectors;
        }
    }

    async void HandleSubmit()
    {
        CurrentUser.SectorIds = SelectedSectors
                                .Select(ss => ss.SectorId)
                                .ToList();

        var IsNameAllowed = true;
        if (InitialNameInput != CurrentUser.Name)
        {
            IsNameAllowed = (await ApiService.GetUserByName(CurrentUser.Name)).UserId.Equals(0);
        }

        if (IsNameAllowed && !CurrentUser.SectorIds.Count.Equals(0))
        {
            CurrentUser = await ApiService.SaveUser(CurrentUser);
        }
    }

    private List<SectorDto> SelectingSectors(List<int> ids, List<SectorDto> sectorDto)
    {
        return sectorDto.Where(hs => ids.Contains(hs.SectorId)).ToList();
    }
}
